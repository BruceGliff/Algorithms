Terminals unused in grammar

   LBR
   RBR
   ILLEGAL


State 0 conflicts: 4 shift/reduce
State 27 conflicts: 4 shift/reduce
State 49 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stms

    2 scope: openScope stms closeScope

    3 openScope: LCB

    4 closeScope: RCB

    5 stms: %empty
    6     | stm
    7     | stms stm
    8     | stms scope

    9 stm: oper

   10 oper: assign
   11     | if
   12     | while
   13     | output

   14 assign: lval ASG expr SM

   15 lval: NAME

   16 expr: expr PLUS expr
   17     | expr MINUS expr
   18     | expr MUL expr
   19     | expr DIV expr
   20     | expr MOD expr
   21     | MINUS expr
   22     | NAME
   23     | VALUE
   24     | INPUT
   25     | LPAR expr RPAR

   26 if: ifh stm
   27   | ifh scope

   28 ifh: IF LPAR lexpr RPAR

   29 lexpr: expr
   30      | expr RELOP expr
   31      | lexpr OR lexpr
   32      | lexpr AND lexpr
   33      | NOT lexpr
   34      | LPAR lexpr RPAR

   35 while: whileh stm
   36      | whileh scope

   37 whileh: WHILE LPAR lexpr RPAR

   38 output: OUTPUT expr SM


Terminals, with rules where they appear

$end (0) 0
error (256)
NAME (258) 15 22
VALUE (259) 23
WHILE (260) 37
IF (261) 28
SM (262) 14 38
LBR (263)
RBR (264)
LPAR (265) 25 28 34 37
RPAR (266) 25 28 34 37
LCB (267) 3
RCB (268) 4
ILLEGAL (269)
OUTPUT (270) 38
ASG (271) 14
RELOP (272) 30
INPUT (273) 24
OR (274) 31
AND (275) 32
NOT (276) 33
PLUS (277) 16
MINUS (278) 17 21
MUL (279) 18
DIV (280) 19
MOD (281) 20
UMINUS (282)


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
program (29)
    on left: 1, on right: 0
scope (30)
    on left: 2, on right: 8 27 36
openScope (31)
    on left: 3, on right: 2
closeScope (32)
    on left: 4, on right: 2
stms (33)
    on left: 5 6 7 8, on right: 1 2 7 8
stm (34)
    on left: 9, on right: 6 7 26 35
oper (35)
    on left: 10 11 12 13, on right: 9
assign (36)
    on left: 14, on right: 10
lval (37)
    on left: 15, on right: 14
expr (38)
    on left: 16 17 18 19 20 21 22 23 24 25, on right: 14 16 17 18 19
    20 21 25 29 30 38
if (39)
    on left: 26 27, on right: 11
ifh (40)
    on left: 28, on right: 26 27
lexpr (41)
    on left: 29 30 31 32 33 34, on right: 28 31 32 33 34 37
while (42)
    on left: 35 36, on right: 12
whileh (43)
    on left: 37, on right: 35 36
output (44)
    on left: 38, on right: 13


State 0

    0 $accept: . program $end

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    OUTPUT  shift, and go to state 4

    NAME      [reduce using rule 5 (stms)]
    WHILE     [reduce using rule 5 (stms)]
    IF        [reduce using rule 5 (stms)]
    OUTPUT    [reduce using rule 5 (stms)]
    $default  reduce using rule 5 (stms)

    program  go to state 5
    stms     go to state 6
    stm      go to state 7
    oper     go to state 8
    assign   go to state 9
    lval     go to state 10
    if       go to state 11
    ifh      go to state 12
    while    go to state 13
    whileh   go to state 14
    output   go to state 15


State 1

   15 lval: NAME .

    $default  reduce using rule 15 (lval)


State 2

   37 whileh: WHILE . LPAR lexpr RPAR

    LPAR  shift, and go to state 16


State 3

   28 ifh: IF . LPAR lexpr RPAR

    LPAR  shift, and go to state 17


State 4

   38 output: OUTPUT . expr SM

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 23


State 5

    0 $accept: program . $end

    $end  shift, and go to state 24


State 6

    1 program: stms .
    7 stms: stms . stm
    8     | stms . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    OUTPUT  shift, and go to state 4

    $default  reduce using rule 1 (program)

    scope      go to state 26
    openScope  go to state 27
    stm        go to state 28
    oper       go to state 8
    assign     go to state 9
    lval       go to state 10
    if         go to state 11
    ifh        go to state 12
    while      go to state 13
    whileh     go to state 14
    output     go to state 15


State 7

    6 stms: stm .

    $default  reduce using rule 6 (stms)


State 8

    9 stm: oper .

    $default  reduce using rule 9 (stm)


State 9

   10 oper: assign .

    $default  reduce using rule 10 (oper)


State 10

   14 assign: lval . ASG expr SM

    ASG  shift, and go to state 29


State 11

   11 oper: if .

    $default  reduce using rule 11 (oper)


State 12

   26 if: ifh . stm
   27   | ifh . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    OUTPUT  shift, and go to state 4

    scope      go to state 30
    openScope  go to state 27
    stm        go to state 31
    oper       go to state 8
    assign     go to state 9
    lval       go to state 10
    if         go to state 11
    ifh        go to state 12
    while      go to state 13
    whileh     go to state 14
    output     go to state 15


State 13

   12 oper: while .

    $default  reduce using rule 12 (oper)


State 14

   35 while: whileh . stm
   36      | whileh . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    OUTPUT  shift, and go to state 4

    scope      go to state 32
    openScope  go to state 27
    stm        go to state 33
    oper       go to state 8
    assign     go to state 9
    lval       go to state 10
    if         go to state 11
    ifh        go to state 12
    while      go to state 13
    whileh     go to state 14
    output     go to state 15


State 15

   13 oper: output .

    $default  reduce using rule 13 (oper)


State 16

   37 whileh: WHILE LPAR . lexpr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 34
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 35
    MINUS  shift, and go to state 22

    expr   go to state 36
    lexpr  go to state 37


State 17

   28 ifh: IF LPAR . lexpr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 34
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 35
    MINUS  shift, and go to state 22

    expr   go to state 36
    lexpr  go to state 38


State 18

   22 expr: NAME .

    $default  reduce using rule 22 (expr)


State 19

   23 expr: VALUE .

    $default  reduce using rule 23 (expr)


State 20

   25 expr: LPAR . expr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 39


State 21

   24 expr: INPUT .

    $default  reduce using rule 24 (expr)


State 22

   21 expr: MINUS . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 40


State 23

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   38 output: OUTPUT expr . SM

    SM     shift, and go to state 41
    PLUS   shift, and go to state 42
    MINUS  shift, and go to state 43
    MUL    shift, and go to state 44
    DIV    shift, and go to state 45
    MOD    shift, and go to state 46


State 24

    0 $accept: program $end .

    $default  accept


State 25

    3 openScope: LCB .

    $default  reduce using rule 3 (openScope)


State 26

    8 stms: stms scope .

    $default  reduce using rule 8 (stms)


State 27

    2 scope: openScope . stms closeScope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    OUTPUT  shift, and go to state 4

    NAME      [reduce using rule 5 (stms)]
    WHILE     [reduce using rule 5 (stms)]
    IF        [reduce using rule 5 (stms)]
    OUTPUT    [reduce using rule 5 (stms)]
    $default  reduce using rule 5 (stms)

    stms    go to state 47
    stm     go to state 7
    oper    go to state 8
    assign  go to state 9
    lval    go to state 10
    if      go to state 11
    ifh     go to state 12
    while   go to state 13
    whileh  go to state 14
    output  go to state 15


State 28

    7 stms: stms stm .

    $default  reduce using rule 7 (stms)


State 29

   14 assign: lval ASG . expr SM

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 48


State 30

   27 if: ifh scope .

    $default  reduce using rule 27 (if)


State 31

   26 if: ifh stm .

    $default  reduce using rule 26 (if)


State 32

   36 while: whileh scope .

    $default  reduce using rule 36 (while)


State 33

   35 while: whileh stm .

    $default  reduce using rule 35 (while)


State 34

   25 expr: LPAR . expr RPAR
   34 lexpr: LPAR . lexpr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 34
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 35
    MINUS  shift, and go to state 22

    expr   go to state 49
    lexpr  go to state 50


State 35

   33 lexpr: NOT . lexpr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 34
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 35
    MINUS  shift, and go to state 22

    expr   go to state 36
    lexpr  go to state 51


State 36

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   29 lexpr: expr .
   30      | expr . RELOP expr

    RELOP  shift, and go to state 52
    PLUS   shift, and go to state 42
    MINUS  shift, and go to state 43
    MUL    shift, and go to state 44
    DIV    shift, and go to state 45
    MOD    shift, and go to state 46

    $default  reduce using rule 29 (lexpr)


State 37

   31 lexpr: lexpr . OR lexpr
   32      | lexpr . AND lexpr
   37 whileh: WHILE LPAR lexpr . RPAR

    RPAR  shift, and go to state 53
    OR    shift, and go to state 54
    AND   shift, and go to state 55


State 38

   28 ifh: IF LPAR lexpr . RPAR
   31 lexpr: lexpr . OR lexpr
   32      | lexpr . AND lexpr

    RPAR  shift, and go to state 56
    OR    shift, and go to state 54
    AND   shift, and go to state 55


State 39

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   25     | LPAR expr . RPAR

    RPAR   shift, and go to state 57
    PLUS   shift, and go to state 42
    MINUS  shift, and go to state 43
    MUL    shift, and go to state 44
    DIV    shift, and go to state 45
    MOD    shift, and go to state 46


State 40

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | MINUS expr .

    $default  reduce using rule 21 (expr)


State 41

   38 output: OUTPUT expr SM .

    $default  reduce using rule 38 (output)


State 42

   16 expr: expr PLUS . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 58


State 43

   17 expr: expr MINUS . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 59


State 44

   18 expr: expr MUL . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 60


State 45

   19 expr: expr DIV . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 61


State 46

   20 expr: expr MOD . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 62


State 47

    2 scope: openScope stms . closeScope
    7 stms: stms . stm
    8     | stms . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    RCB     shift, and go to state 63
    OUTPUT  shift, and go to state 4

    scope       go to state 26
    openScope   go to state 27
    closeScope  go to state 64
    stm         go to state 28
    oper        go to state 8
    assign      go to state 9
    lval        go to state 10
    if          go to state 11
    ifh         go to state 12
    while       go to state 13
    whileh      go to state 14
    output      go to state 15


State 48

   14 assign: lval ASG expr . SM
   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr

    SM     shift, and go to state 65
    PLUS   shift, and go to state 42
    MINUS  shift, and go to state 43
    MUL    shift, and go to state 44
    DIV    shift, and go to state 45
    MOD    shift, and go to state 46


State 49

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   25     | LPAR expr . RPAR
   29 lexpr: expr .
   30      | expr . RELOP expr

    RPAR   shift, and go to state 57
    RELOP  shift, and go to state 52
    PLUS   shift, and go to state 42
    MINUS  shift, and go to state 43
    MUL    shift, and go to state 44
    DIV    shift, and go to state 45
    MOD    shift, and go to state 46

    RPAR      [reduce using rule 29 (lexpr)]
    $default  reduce using rule 29 (lexpr)


State 50

   31 lexpr: lexpr . OR lexpr
   32      | lexpr . AND lexpr
   34      | LPAR lexpr . RPAR

    RPAR  shift, and go to state 66
    OR    shift, and go to state 54
    AND   shift, and go to state 55


State 51

   31 lexpr: lexpr . OR lexpr
   32      | lexpr . AND lexpr
   33      | NOT lexpr .

    $default  reduce using rule 33 (lexpr)


State 52

   30 lexpr: expr RELOP . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 67


State 53

   37 whileh: WHILE LPAR lexpr RPAR .

    $default  reduce using rule 37 (whileh)


State 54

   31 lexpr: lexpr OR . lexpr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 34
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 35
    MINUS  shift, and go to state 22

    expr   go to state 36
    lexpr  go to state 68


State 55

   32 lexpr: lexpr AND . lexpr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 34
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 35
    MINUS  shift, and go to state 22

    expr   go to state 36
    lexpr  go to state 69


State 56

   28 ifh: IF LPAR lexpr RPAR .

    $default  reduce using rule 28 (ifh)


State 57

   25 expr: LPAR expr RPAR .

    $default  reduce using rule 25 (expr)


State 58

   16 expr: expr . PLUS expr
   16     | expr PLUS expr .
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr

    MUL  shift, and go to state 44
    DIV  shift, and go to state 45
    MOD  shift, and go to state 46

    $default  reduce using rule 16 (expr)


State 59

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   17     | expr MINUS expr .
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr

    MUL  shift, and go to state 44
    DIV  shift, and go to state 45
    MOD  shift, and go to state 46

    $default  reduce using rule 17 (expr)


State 60

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   18     | expr MUL expr .
   19     | expr . DIV expr
   20     | expr . MOD expr

    $default  reduce using rule 18 (expr)


State 61

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   19     | expr DIV expr .
   20     | expr . MOD expr

    $default  reduce using rule 19 (expr)


State 62

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   20     | expr MOD expr .

    $default  reduce using rule 20 (expr)


State 63

    4 closeScope: RCB .

    $default  reduce using rule 4 (closeScope)


State 64

    2 scope: openScope stms closeScope .

    $default  reduce using rule 2 (scope)


State 65

   14 assign: lval ASG expr SM .

    $default  reduce using rule 14 (assign)


State 66

   34 lexpr: LPAR lexpr RPAR .

    $default  reduce using rule 34 (lexpr)


State 67

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   30 lexpr: expr RELOP expr .

    PLUS   shift, and go to state 42
    MINUS  shift, and go to state 43
    MUL    shift, and go to state 44
    DIV    shift, and go to state 45
    MOD    shift, and go to state 46

    $default  reduce using rule 30 (lexpr)


State 68

   31 lexpr: lexpr . OR lexpr
   31      | lexpr OR lexpr .
   32      | lexpr . AND lexpr

    AND  shift, and go to state 55

    $default  reduce using rule 31 (lexpr)


State 69

   31 lexpr: lexpr . OR lexpr
   32      | lexpr . AND lexpr
   32      | lexpr AND lexpr .

    $default  reduce using rule 32 (lexpr)
