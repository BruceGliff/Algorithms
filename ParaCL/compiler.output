Terminals unused in grammar

   LBR
   RBR
   ILLEGAL


State 0 conflicts: 4 shift/reduce
State 12 conflicts: 5 shift/reduce
State 25 conflicts: 4 shift/reduce
State 30 conflicts: 5 shift/reduce
State 48 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stms

    2 scope: LCB stms RCB

    3 stms: %empty
    4     | stm
    5     | stms stm
    6     | stms scope

    7 stm: oper

    8 oper: assign
    9     | if
   10     | while
   11     | output

   12 assign: lval ASG expr SM

   13 lval: NAME

   14 expr: expr PLUS expr
   15     | expr MINUS expr
   16     | expr MUL expr
   17     | expr DIV expr
   18     | expr MOD expr
   19     | MINUS expr
   20     | NAME
   21     | VALUE
   22     | INPUT
   23     | LPAR expr RPAR

   24 if: ifh stms
   25   | ifh scope

   26 ifh: IF LPAR lexpr RPAR

   27 lexpr: expr
   28      | expr RELOP expr
   29      | lexpr OR lexpr
   30      | lexpr AND lexpr
   31      | NOT lexpr
   32      | LPAR lexpr RPAR

   33 while: whileh stm
   34      | whileh scope

   35 whileh: WHILE LPAR lexpr RPAR

   36 output: OUTPUT expr SM


Terminals, with rules where they appear

$end (0) 0
error (256)
NAME (258) 13 20
VALUE (259) 21
WHILE (260) 35
IF (261) 26
SM (262) 12 36
LBR (263)
RBR (264)
LPAR (265) 23 26 32 35
RPAR (266) 23 26 32 35
LCB (267) 2
RCB (268) 2
ILLEGAL (269)
OUTPUT (270) 36
ASG (271) 12
RELOP (272) 28
INPUT (273) 22
OR (274) 29
AND (275) 30
NOT (276) 31
PLUS (277) 14
MINUS (278) 15 19
MUL (279) 16
DIV (280) 17
MOD (281) 18
UMINUS (282)


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
program (29)
    on left: 1, on right: 0
scope (30)
    on left: 2, on right: 6 25 34
stms (31)
    on left: 3 4 5 6, on right: 1 2 5 6 24
stm (32)
    on left: 7, on right: 4 5 33
oper (33)
    on left: 8 9 10 11, on right: 7
assign (34)
    on left: 12, on right: 8
lval (35)
    on left: 13, on right: 12
expr (36)
    on left: 14 15 16 17 18 19 20 21 22 23, on right: 12 14 15 16 17
    18 19 23 27 28 36
if (37)
    on left: 24 25, on right: 9
ifh (38)
    on left: 26, on right: 24 25
lexpr (39)
    on left: 27 28 29 30 31 32, on right: 26 29 30 31 32 35
while (40)
    on left: 33 34, on right: 10
whileh (41)
    on left: 35, on right: 33 34
output (42)
    on left: 36, on right: 11


State 0

    0 $accept: . program $end

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    OUTPUT  shift, and go to state 4

    NAME      [reduce using rule 3 (stms)]
    WHILE     [reduce using rule 3 (stms)]
    IF        [reduce using rule 3 (stms)]
    OUTPUT    [reduce using rule 3 (stms)]
    $default  reduce using rule 3 (stms)

    program  go to state 5
    stms     go to state 6
    stm      go to state 7
    oper     go to state 8
    assign   go to state 9
    lval     go to state 10
    if       go to state 11
    ifh      go to state 12
    while    go to state 13
    whileh   go to state 14
    output   go to state 15


State 1

   13 lval: NAME .

    $default  reduce using rule 13 (lval)


State 2

   35 whileh: WHILE . LPAR lexpr RPAR

    LPAR  shift, and go to state 16


State 3

   26 ifh: IF . LPAR lexpr RPAR

    LPAR  shift, and go to state 17


State 4

   36 output: OUTPUT . expr SM

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 23


State 5

    0 $accept: program . $end

    $end  shift, and go to state 24


State 6

    1 program: stms .
    5 stms: stms . stm
    6     | stms . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    OUTPUT  shift, and go to state 4

    $default  reduce using rule 1 (program)

    scope   go to state 26
    stm     go to state 27
    oper    go to state 8
    assign  go to state 9
    lval    go to state 10
    if      go to state 11
    ifh     go to state 12
    while   go to state 13
    whileh  go to state 14
    output  go to state 15


State 7

    4 stms: stm .

    $default  reduce using rule 4 (stms)


State 8

    7 stm: oper .

    $default  reduce using rule 7 (stm)


State 9

    8 oper: assign .

    $default  reduce using rule 8 (oper)


State 10

   12 assign: lval . ASG expr SM

    ASG  shift, and go to state 28


State 11

    9 oper: if .

    $default  reduce using rule 9 (oper)


State 12

   24 if: ifh . stms
   25   | ifh . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    OUTPUT  shift, and go to state 4

    NAME      [reduce using rule 3 (stms)]
    WHILE     [reduce using rule 3 (stms)]
    IF        [reduce using rule 3 (stms)]
    LCB       [reduce using rule 3 (stms)]
    OUTPUT    [reduce using rule 3 (stms)]
    $default  reduce using rule 3 (stms)

    scope   go to state 29
    stms    go to state 30
    stm     go to state 7
    oper    go to state 8
    assign  go to state 9
    lval    go to state 10
    if      go to state 11
    ifh     go to state 12
    while   go to state 13
    whileh  go to state 14
    output  go to state 15


State 13

   10 oper: while .

    $default  reduce using rule 10 (oper)


State 14

   33 while: whileh . stm
   34      | whileh . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    OUTPUT  shift, and go to state 4

    scope   go to state 31
    stm     go to state 32
    oper    go to state 8
    assign  go to state 9
    lval    go to state 10
    if      go to state 11
    ifh     go to state 12
    while   go to state 13
    whileh  go to state 14
    output  go to state 15


State 15

   11 oper: output .

    $default  reduce using rule 11 (oper)


State 16

   35 whileh: WHILE LPAR . lexpr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 33
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 34
    MINUS  shift, and go to state 22

    expr   go to state 35
    lexpr  go to state 36


State 17

   26 ifh: IF LPAR . lexpr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 33
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 34
    MINUS  shift, and go to state 22

    expr   go to state 35
    lexpr  go to state 37


State 18

   20 expr: NAME .

    $default  reduce using rule 20 (expr)


State 19

   21 expr: VALUE .

    $default  reduce using rule 21 (expr)


State 20

   23 expr: LPAR . expr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 38


State 21

   22 expr: INPUT .

    $default  reduce using rule 22 (expr)


State 22

   19 expr: MINUS . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 39


State 23

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   36 output: OUTPUT expr . SM

    SM     shift, and go to state 40
    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    MOD    shift, and go to state 45


State 24

    0 $accept: program $end .

    $default  accept


State 25

    2 scope: LCB . stms RCB

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    OUTPUT  shift, and go to state 4

    NAME      [reduce using rule 3 (stms)]
    WHILE     [reduce using rule 3 (stms)]
    IF        [reduce using rule 3 (stms)]
    OUTPUT    [reduce using rule 3 (stms)]
    $default  reduce using rule 3 (stms)

    stms    go to state 46
    stm     go to state 7
    oper    go to state 8
    assign  go to state 9
    lval    go to state 10
    if      go to state 11
    ifh     go to state 12
    while   go to state 13
    whileh  go to state 14
    output  go to state 15


State 26

    6 stms: stms scope .

    $default  reduce using rule 6 (stms)


State 27

    5 stms: stms stm .

    $default  reduce using rule 5 (stms)


State 28

   12 assign: lval ASG . expr SM

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 47


State 29

   25 if: ifh scope .

    $default  reduce using rule 25 (if)


State 30

    5 stms: stms . stm
    6     | stms . scope
   24 if: ifh stms .

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    OUTPUT  shift, and go to state 4

    NAME      [reduce using rule 24 (if)]
    WHILE     [reduce using rule 24 (if)]
    IF        [reduce using rule 24 (if)]
    LCB       [reduce using rule 24 (if)]
    OUTPUT    [reduce using rule 24 (if)]
    $default  reduce using rule 24 (if)

    scope   go to state 26
    stm     go to state 27
    oper    go to state 8
    assign  go to state 9
    lval    go to state 10
    if      go to state 11
    ifh     go to state 12
    while   go to state 13
    whileh  go to state 14
    output  go to state 15


State 31

   34 while: whileh scope .

    $default  reduce using rule 34 (while)


State 32

   33 while: whileh stm .

    $default  reduce using rule 33 (while)


State 33

   23 expr: LPAR . expr RPAR
   32 lexpr: LPAR . lexpr RPAR

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 33
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 34
    MINUS  shift, and go to state 22

    expr   go to state 48
    lexpr  go to state 49


State 34

   31 lexpr: NOT . lexpr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 33
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 34
    MINUS  shift, and go to state 22

    expr   go to state 35
    lexpr  go to state 50


State 35

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   27 lexpr: expr .
   28      | expr . RELOP expr

    RELOP  shift, and go to state 51
    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    MOD    shift, and go to state 45

    $default  reduce using rule 27 (lexpr)


State 36

   29 lexpr: lexpr . OR lexpr
   30      | lexpr . AND lexpr
   35 whileh: WHILE LPAR lexpr . RPAR

    RPAR  shift, and go to state 52
    OR    shift, and go to state 53
    AND   shift, and go to state 54


State 37

   26 ifh: IF LPAR lexpr . RPAR
   29 lexpr: lexpr . OR lexpr
   30      | lexpr . AND lexpr

    RPAR  shift, and go to state 55
    OR    shift, and go to state 53
    AND   shift, and go to state 54


State 38

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   23     | LPAR expr . RPAR

    RPAR   shift, and go to state 56
    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    MOD    shift, and go to state 45


State 39

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | MINUS expr .

    $default  reduce using rule 19 (expr)


State 40

   36 output: OUTPUT expr SM .

    $default  reduce using rule 36 (output)


State 41

   14 expr: expr PLUS . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 57


State 42

   15 expr: expr MINUS . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 58


State 43

   16 expr: expr MUL . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 59


State 44

   17 expr: expr DIV . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 60


State 45

   18 expr: expr MOD . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 61


State 46

    2 scope: LCB stms . RCB
    5 stms: stms . stm
    6     | stms . scope

    NAME    shift, and go to state 1
    WHILE   shift, and go to state 2
    IF      shift, and go to state 3
    LCB     shift, and go to state 25
    RCB     shift, and go to state 62
    OUTPUT  shift, and go to state 4

    scope   go to state 26
    stm     go to state 27
    oper    go to state 8
    assign  go to state 9
    lval    go to state 10
    if      go to state 11
    ifh     go to state 12
    while   go to state 13
    whileh  go to state 14
    output  go to state 15


State 47

   12 assign: lval ASG expr . SM
   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr

    SM     shift, and go to state 63
    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    MOD    shift, and go to state 45


State 48

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   23     | LPAR expr . RPAR
   27 lexpr: expr .
   28      | expr . RELOP expr

    RPAR   shift, and go to state 56
    RELOP  shift, and go to state 51
    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    MOD    shift, and go to state 45

    RPAR      [reduce using rule 27 (lexpr)]
    $default  reduce using rule 27 (lexpr)


State 49

   29 lexpr: lexpr . OR lexpr
   30      | lexpr . AND lexpr
   32      | LPAR lexpr . RPAR

    RPAR  shift, and go to state 64
    OR    shift, and go to state 53
    AND   shift, and go to state 54


State 50

   29 lexpr: lexpr . OR lexpr
   30      | lexpr . AND lexpr
   31      | NOT lexpr .

    $default  reduce using rule 31 (lexpr)


State 51

   28 lexpr: expr RELOP . expr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 20
    INPUT  shift, and go to state 21
    MINUS  shift, and go to state 22

    expr  go to state 65


State 52

   35 whileh: WHILE LPAR lexpr RPAR .

    $default  reduce using rule 35 (whileh)


State 53

   29 lexpr: lexpr OR . lexpr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 33
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 34
    MINUS  shift, and go to state 22

    expr   go to state 35
    lexpr  go to state 66


State 54

   30 lexpr: lexpr AND . lexpr

    NAME   shift, and go to state 18
    VALUE  shift, and go to state 19
    LPAR   shift, and go to state 33
    INPUT  shift, and go to state 21
    NOT    shift, and go to state 34
    MINUS  shift, and go to state 22

    expr   go to state 35
    lexpr  go to state 67


State 55

   26 ifh: IF LPAR lexpr RPAR .

    $default  reduce using rule 26 (ifh)


State 56

   23 expr: LPAR expr RPAR .

    $default  reduce using rule 23 (expr)


State 57

   14 expr: expr . PLUS expr
   14     | expr PLUS expr .
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr

    MUL  shift, and go to state 43
    DIV  shift, and go to state 44
    MOD  shift, and go to state 45

    $default  reduce using rule 14 (expr)


State 58

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   15     | expr MINUS expr .
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr

    MUL  shift, and go to state 43
    DIV  shift, and go to state 44
    MOD  shift, and go to state 45

    $default  reduce using rule 15 (expr)


State 59

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   16     | expr MUL expr .
   17     | expr . DIV expr
   18     | expr . MOD expr

    $default  reduce using rule 16 (expr)


State 60

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   17     | expr DIV expr .
   18     | expr . MOD expr

    $default  reduce using rule 17 (expr)


State 61

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   18     | expr MOD expr .

    $default  reduce using rule 18 (expr)


State 62

    2 scope: LCB stms RCB .

    $default  reduce using rule 2 (scope)


State 63

   12 assign: lval ASG expr SM .

    $default  reduce using rule 12 (assign)


State 64

   32 lexpr: LPAR lexpr RPAR .

    $default  reduce using rule 32 (lexpr)


State 65

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   28 lexpr: expr RELOP expr .

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    MOD    shift, and go to state 45

    $default  reduce using rule 28 (lexpr)


State 66

   29 lexpr: lexpr . OR lexpr
   29      | lexpr OR lexpr .
   30      | lexpr . AND lexpr

    AND  shift, and go to state 54

    $default  reduce using rule 29 (lexpr)


State 67

   29 lexpr: lexpr . OR lexpr
   30      | lexpr . AND lexpr
   30      | lexpr AND lexpr .

    $default  reduce using rule 30 (lexpr)
